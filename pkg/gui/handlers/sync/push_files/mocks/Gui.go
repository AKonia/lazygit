// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	commands "github.com/jesseduffield/lazygit/pkg/commands"
	config "github.com/jesseduffield/lazygit/pkg/config"

	i18n "github.com/jesseduffield/lazygit/pkg/i18n"

	mock "github.com/stretchr/testify/mock"

	models "github.com/jesseduffield/lazygit/pkg/commands/models"

	types "github.com/jesseduffield/lazygit/pkg/gui/types"
)

// Gui is an autogenerated mock type for the Gui type
type Gui struct {
	mock.Mock
}

// Ask provides a mock function with given fields: _a0
func (_m *Gui) Ask(_a0 types.AskOpts) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.AskOpts) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateErrorPanel provides a mock function with given fields: _a0
func (_m *Gui) CreateErrorPanel(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CurrentBranch provides a mock function with given fields:
func (_m *Gui) CurrentBranch() *models.Branch {
	ret := _m.Called()

	var r0 *models.Branch
	if rf, ok := ret.Get(0).(func() *models.Branch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Branch)
		}
	}

	return r0
}

// GetGitCommand provides a mock function with given fields:
func (_m *Gui) GetGitCommand() commands.IGitCommand {
	ret := _m.Called()

	var r0 commands.IGitCommand
	if rf, ok := ret.Get(0).(func() commands.IGitCommand); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commands.IGitCommand)
		}
	}

	return r0
}

// GetTr provides a mock function with given fields:
func (_m *Gui) GetTr() *i18n.TranslationSet {
	ret := _m.Called()

	var r0 *i18n.TranslationSet
	if rf, ok := ret.Get(0).(func() *i18n.TranslationSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*i18n.TranslationSet)
		}
	}

	return r0
}

// GetUserConfig provides a mock function with given fields:
func (_m *Gui) GetUserConfig() *config.UserConfig {
	ret := _m.Called()

	var r0 *config.UserConfig
	if rf, ok := ret.Get(0).(func() *config.UserConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.UserConfig)
		}
	}

	return r0
}

// HandleCredentialsPopup provides a mock function with given fields: _a0
func (_m *Gui) HandleCredentialsPopup(_a0 error) {
	_m.Called(_a0)
}

// PopupPanelFocused provides a mock function with given fields:
func (_m *Gui) PopupPanelFocused() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Prompt provides a mock function with given fields: _a0
func (_m *Gui) Prompt(_a0 types.PromptOpts) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.PromptOpts) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PromptUserForCredential provides a mock function with given fields: passOrUname
func (_m *Gui) PromptUserForCredential(passOrUname string) string {
	ret := _m.Called(passOrUname)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(passOrUname)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RefreshSidePanels provides a mock function with given fields: _a0
func (_m *Gui) RefreshSidePanels(_a0 types.RefreshOptions) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.RefreshOptions) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SurfaceError provides a mock function with given fields: _a0
func (_m *Gui) SurfaceError(_a0 error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpstreamForBranchInConfig provides a mock function with given fields: _a0
func (_m *Gui) UpstreamForBranchInConfig(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithPopupWaitingStatus provides a mock function with given fields: _a0, _a1
func (_m *Gui) WithPopupWaitingStatus(_a0 string, _a1 func() error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func() error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
